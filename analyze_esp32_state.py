#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è ESP32-S3 –ø–æ –¥–∞–º–ø—É —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤
–ü–æ–º–æ–≥–∞–µ—Ç –ø–æ–Ω—è—Ç—å –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∏ —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
"""

import re
import subprocess
import os

class ESP32StateAnalyzer:
    def __init__(self, elf_file="build/hydroponics.elf"):
        self.elf_file = elf_file
        self.pc = None
        self.sp = None
        self.registers = {}
        
    def parse_register_dump(self, dump_text):
        """–ü–∞—Ä—Å–∏—Ç –¥–∞–º–ø —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        # –†–µ–≥—É–ª—è—Ä–∫–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞: (N) name (/bits): 0xVALUE
        pattern = r'\((\d+)\)\s+(\w+)\s+\(/\d+\):\s+(0x[0-9a-fA-F]+)'
        
        for match in re.finditer(pattern, dump_text):
            reg_num = int(match.group(1))
            reg_name = match.group(2)
            reg_value = int(match.group(3), 16)
            self.registers[reg_name] = reg_value
            
        # –ö–ª—é—á–µ–≤—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä—ã
        self.pc = self.registers.get('pc', 0)
        self.sp = self.registers.get('a1', 0)  # a1 = SP –≤ Xtensa
        
        print(f"[OK] –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ {len(self.registers)} —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤")
        return self.registers
    
    def analyze_pc(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç Program Counter"""
        print("\n" + "="*60)
        print("üìç PROGRAM COUNTER ANALYSIS")
        print("="*60)
        
        pc = self.pc
        print(f"PC = 0x{pc:08X}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±–ª–∞—Å—Ç—å –ø–∞–º—è—Ç–∏
        if 0x40000000 <= pc < 0x40060000:
            region = "ROM (Boot ROM)"
            print(f"–û–±–ª–∞—Å—Ç—å: {region} [!]")
            print("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ Boot ROM - –≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∫–∞ –∏–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ")
        elif 0x40370000 <= pc < 0x403E0000:
            region = "IRAM"
            print(f"–û–±–ª–∞—Å—Ç—å: {region} [OK]")
            print("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∏–∑ IRAM - –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
        elif 0x42000000 <= pc < 0x44000000:
            region = "Flash (memory mapped)"
            print(f"–û–±–ª–∞—Å—Ç—å: {region} [OK]")
            print("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∏–∑ Flash - –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
        elif 0x3FC88000 <= pc < 0x3FD00000:
            region = "DRAM"
            print(f"–û–±–ª–∞—Å—Ç—å: {region} [!]")
            print("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–∑ DRAM - –Ω–µ–æ–±—ã—á–Ω–æ, –≤–æ–∑–º–æ–∂–Ω–æ JIT –∏–ª–∏ –æ—à–∏–±–∫–∞")
        else:
            region = "Unknown"
            print(f"–û–±–ª–∞—Å—Ç—å: {region} [ERROR]")
            print("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –ø–∞–º—è—Ç–∏ - –≤–æ–∑–º–æ–∂–Ω–∞ –æ—à–∏–±–∫–∞!")
        
        return region
    
    def analyze_sp(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç Stack Pointer"""
        print("\n" + "="*60)
        print("üìö STACK POINTER ANALYSIS")
        print("="*60)
        
        sp = self.sp
        print(f"SP = 0x{sp:08X}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ SP –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
        if 0x3FC88000 <= sp < 0x3FD00000:
            print("–û–±–ª–∞—Å—Ç—å: DRAM [OK]")
            print("Stack –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏")
            
            # –ü—Ä–∏–∫–∏–¥—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—Ç–µ–∫–∞ (–µ—Å–ª–∏ –∑–Ω–∞–µ–º –Ω–∞—á–∞–ª–æ)
            # –û–±—ã—á–Ω–æ —Å—Ç–µ–∫ –¥–ª—è –∑–∞–¥–∞—á FreeRTOS –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤ –∫–æ–Ω—Ü–µ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
            # –∏ —Ä–∞—Å—Ç–µ—Ç –≤–Ω–∏–∑
        elif 0x3FCE0000 <= sp < 0x3FD00000:
            print("–û–±–ª–∞—Å—Ç—å: DRAM (–≤–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å) [OK]")
        else:
            print("–û–±–ª–∞—Å—Ç—å: [!] –ù–µ–æ–±—ã—á–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è —Å—Ç–µ–∫–∞!")
            
        return sp
    
    def analyze_exceptions(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä—ã –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
        print("\n" + "="*60)
        print("‚ö†Ô∏è  EXCEPTION ANALYSIS")
        print("="*60)
        
        exccause = self.registers.get('exccause', 0)
        debugcause = self.registers.get('debugcause', 0)
        excvaddr = self.registers.get('excvaddr', 0)
        
        print(f"EXCCAUSE   = 0x{exccause:08X}")
        if exccause == 0:
            print("  -> –ù–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è [OK]")
        else:
            causes = {
                0: "IllegalInstructionCause",
                1: "SyscallCause", 
                2: "InstructionFetchErrorCause",
                3: "LoadStoreErrorCause",
                4: "Level1InterruptCause",
                5: "AllocaCause",
                6: "IntegerDivideByZeroCause",
                9: "LoadStoreAlignmentCause",
                28: "LoadProhibitedCause",
                29: "StoreProhibitedCause",
            }
            cause_str = causes.get(exccause, "Unknown")
            print(f"  -> {cause_str} [!]")
        
        print(f"\nDEBUGCAUSE = 0x{debugcause:08X}")
        if debugcause & 0x20:
            print("  -> Debug Interrupt (–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ—Ç–ª–∞–¥—á–∏–∫–æ–º)")
        if debugcause & 0x01:
            print("  -> Instruction breakpoint")
        if debugcause & 0x02:
            print("  -> Data breakpoint (load)")
        if debugcause & 0x04:
            print("  -> Data breakpoint (store)")
            
        if excvaddr != 0:
            print(f"\nEXCVADDR   = 0x{excvaddr:08X}")
            print("  -> –ê–¥—Ä–µ—Å, –≤—ã–∑–≤–∞–≤—à–∏–π –∏—Å–∫–ª—é—á–µ–Ω–∏–µ")
    
    def analyze_interrupts(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è"""
        print("\n" + "="*60)
        print("[IRQ] INTERRUPT ANALYSIS")
        print("="*60)
        
        interrupt = self.registers.get('interrupt', 0)
        intenable = self.registers.get('intenable', 0)
        
        print(f"INTERRUPT  = 0x{interrupt:08X} (–∞–∫—Ç–∏–≤–Ω—ã–µ)")
        print(f"INTENABLE  = 0x{intenable:08X} (—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ)")
        
        if interrupt:
            print("\n–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è:")
            for i in range(32):
                if interrupt & (1 << i):
                    int_names = {
                        6: "Timer",
                        15: "WiFi MAC",
                        16: "WiFi BB",
                        19: "UART0",
                        22: "I2C",
                    }
                    name = int_names.get(i, f"IRQ{i}")
                    print(f"  - Bit {i}: {name}")
        else:
            print("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π")
    
    def find_function_at_pc(self):
        """–ù–∞—Ö–æ–¥–∏—Ç —Ñ—É–Ω–∫—Ü–∏—é –ø–æ –∞–¥—Ä–µ—Å—É PC –∏—Å–ø–æ–ª—å–∑—É—è addr2line"""
        print("\n" + "="*60)
        print("[FUNC] FUNCTION LOOKUP")
        print("="*60)
        
        if not os.path.exists(self.elf_file):
            print(f"[!] ELF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.elf_file}")
            return
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º addr2line –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏
            result = subprocess.run(
                ['xtensa-esp32s3-elf-addr2line', '-e', self.elf_file, 
                 '-f', '-C', f'0x{self.pc:08X}'],
                capture_output=True, text=True, timeout=5
            )
            
            if result.returncode == 0:
                lines = result.stdout.strip().split('\n')
                if len(lines) >= 2:
                    function = lines[0]
                    location = lines[1]
                    print(f"–§—É–Ω–∫—Ü–∏—è: {function}")
                    print(f"–§–∞–π–ª:    {location}")
                else:
                    print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é")
            else:
                print("[!] addr2line –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                
        except FileNotFoundError:
            print("[!] xtensa-esp32s3-elf-addr2line –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH")
        except Exception as e:
            print(f"[!] –û—à–∏–±–∫–∞: {e}")
    
    def dump_stack(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å—Ç–µ–∫ —á–µ—Ä–µ–∑ OpenOCD"""
        print("\n" + "="*60)
        print("[STACK] STACK DUMP COMMANDS")
        print("="*60)
        
        sp = self.sp
        print(f"Stack Pointer: 0x{sp:08X}")
        print("\n–î–ª—è —á—Ç–µ–Ω–∏—è —Å—Ç–µ–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤ OpenOCD (telnet localhost 4444):")
        print(f"  mdw 0x{sp:08X} 64")
        print("\n–ò–ª–∏ –≤ GDB:")
        print(f"  x/64xw 0x{sp:08X}")
        print("\n–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Python —Å–∫—Ä–∏–ø—Ç:")
        print(f"  python read_esp32_memory.py")
        print(f"  # –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é 9 –∏ –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å: {sp:08X}")
    
    def generate_commands(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
        print("\n" + "="*60)
        print("[NEXT] SUGGESTED NEXT STEPS")
        print("="*60)
        
        print("\n[1] –ü—Ä–æ—á–∏—Ç–∞—Ç—å —Å—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:")
        print("   python read_esp32_memory.py")
        print(f"   # –ê–¥—Ä–µ—Å: {self.sp:08X}, count: 128")
        
        print("\n[2] –ü–æ–ª—É—á–∏—Ç—å backtrace –≤ GDB:")
        print("   xtensa-esp32s3-elf-gdb build/hydroponics.elf")
        print("   (gdb) target remote localhost:3333")
        print("   (gdb) bt")
        
        print("\n[3] –ü—Ä–æ—á–∏—Ç–∞—Ç—å –∫–æ–¥ –ø–æ PC:")
        print(f"   (gdb) x/10i 0x{self.pc:08X}")
        
        print("\n[4] –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ:")
        print("   –í telnet: reset run")
        print("   –í GDB: continue")
        
        print("\n[5] –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å breakpoint –Ω–∞ app_main:")
        print("   (gdb) b app_main")
        print("   (gdb) monitor reset halt")
        print("   (gdb) c")


def main():
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UTF-8 –¥–ª—è Windows –∫–æ–Ω—Å–æ–ª–∏
    if os.name == 'nt':
        try:
            import sys
            sys.stdout.reconfigure(encoding='utf-8')
        except:
            pass
    
    print("="*60)
    print("  ESP32-S3 State Analyzer")
    print("="*60)
    
    # –ß–∏—Ç–∞–µ–º –¥–∞–º–ø –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π
    import sys
    
    if len(sys.argv) > 1:
        dump_file = sys.argv[1]
        with open(dump_file, 'r') as f:
            dump_text = f.read()
    else:
        # –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –¥–∞–º–ø –∏–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
        dump_text = """
(0) pc (/32): 0x40056f62
(1) ar0 (/32): 0x000230c8
(81) a0 (/32): 0x80045101
(82) a1 (/32): 0x3fceb1f0
(126) debugcause (/32): 0x00000020
(160) epc1 (/32): 0x40044290
(165) epc6 (/32): 0x40056f62
(177) exccause (/32): 0x00000000
(181) interrupt (/32): 0x00018040
(184) intenable (/32): 0x00000000
(188) excvaddr (/32): 0x00000000
"""
    
    analyzer = ESP32StateAnalyzer()
    analyzer.parse_register_dump(dump_text)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
    analyzer.analyze_pc()
    analyzer.analyze_sp()
    analyzer.analyze_exceptions()
    analyzer.analyze_interrupts()
    analyzer.find_function_at_pc()
    analyzer.dump_stack()
    analyzer.generate_commands()
    
    print("\n" + "="*60)
    print("[OK] –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print("="*60)


if __name__ == "__main__":
    main()

